/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/Fox.gltf -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    fox: THREE.SkinnedMesh;
    _rootJoint: THREE.Bone;
  };
  materials: {
    fox_material: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = "Survey" | "Walk" | "Run";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

export function Fox(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF("/Fox.gltf") as GLTFResult;
  const { actions } = useAnimations(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <group name="root">
          <primitive object={nodes._rootJoint} />
        </group>
        <skinnedMesh
          name="fox"
          geometry={nodes.fox.geometry}
          material={materials.fox_material}
          skeleton={nodes.fox.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/Fox.gltf");
